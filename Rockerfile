# This is basically a Docker file but with ruby for convenience.
#
# Run all your usual docker directives(lowcase though) and they will each
# be translated into a single line in Dockerfile
#
# e.g.:
#   run "hello"
# is equal to
#   RUN hello
#
# Multiple lines are stripped and joined with '; '
#
#   |run %Q{
#   |  foo
#   |  bar
#   |  this is new line \
#   |    this is not
#   |}
#
# translates into
#
#   RUN foo; bar; this is new line     this is not
#                                   âˆ§
#                                   |
#           note the spaces here ---'

OS_SOURCES = {
  'centos5' => 'docker-dev.yelpcorp.com/centos5_yelp:latest',
  'centos6' => 'docker-dev.yelpcorp.com/centos6_yelp:latest',
  'lucid'   => 'docker-dev.yelpcorp.com/lucid_yelp:latest',
  'precise' => 'docker-dev.yelpcorp.com/precise_yelp:latest',
  'trusty'  => 'docker-dev.yelpcorp.com/trusty_yelp:latest',
  'xenial'  => 'docker-dev.yelpcorp.com/xenial_yelp:latest'
}

from OS_SOURCES[env_os]
env "DEBIAN_FRONTEND=noninteractive"
# packages

rpm_packages = %w{
  bison fakeroot gcc-c++ gdbm-devel gnutls-devel libffi-devel tar
  libxslt-devel pcre-devel readline readline-devel openssl-devel
  rpmdevtools rpm-build sudo zlib zlib-devel ruby gawk }
c5_packages = rpm_packages + %w{make git bzip2 curl patch openssl-0.9.8e-22.el5_8.4}
c6_packages = rpm_packages + %w{
  autoconf git-1.7.1 libvirt libvirt-devel passwd glibc-headers glibc-common glibc}

if env_os == 'centos5'
  run %Q{ yum install #{c5_packages.sort.join(' ')} -y }
  run %Q{ rpm -Uvh ftp://ftp.pbone.net/mirror/dl.iuscommunity.org/pub/ius/archive/Redhat/5/i386/autoconf26x-2.63-4.ius.el5.noarch.rpm }
elsif env_os == 'centos6'
  run "yum install #{c6_packages.sort.join(' ')} -y"
end

packages = {}
packages['deb']     = %w{
  autoconf bison build-essential curl fakeroot libgdbm-dev libgnutls-dev
  libncurses5-dev libpcre3-dev libsqlite3-dev libssl-dev libxslt1-dev
  pkg-config screen sudo wget zlib1g zlib1g-dev
  git-core libxml2-dev ruby gawk }

packages['tpl']     = packages['deb'] + %w{libffi6 libffi-dev libreadline6 libreadline6-dev}
packages['lucid']   = packages['tpl'] - %w{libffi6} + %w{libffi5}
packages['precise'] = packages['trusty'] = packages['xenial'] = packages['tpl']

run %Q{
  rm -f /etc/dpkg/dpkg.cfg.d/02apt-speedup
  apt-get -qq update && \
  apt-get -qq install #{packages[env_os].sort.join(' ')} --force-yes
} if %w{xenial trusty precise lucid}.include? env_os

if env_os == 'lucid'
  run %Q{
    wget http://security.ubuntu.com/ubuntu/pool/main/c/ca-certificates/ca-certificates_20160104ubuntu0.14.04.1_all.deb
    wget http://security.ubuntu.com/ubuntu/pool/main/o/openssl/openssl_1.0.1f-1ubuntu2.19_amd64.deb
    dpkg -i openssl_1.0.1f-1ubuntu2.19_amd64.deb ca-certificates_20160104ubuntu0.14.04.1_all.deb
    rm openssl_1.0.1f-1ubuntu2.19_amd64.deb ca-certificates_20160104ubuntu0.14.04.1_all.deb
  }
end

# user jenkins

run %Q{
  adduser jenkins -g root
  adduser puppet
  mkdir -p /home/jenkins/.ssh
  chown jenkins: /home/jenkins/.ssh
  chmod 700 /home/jenkins/.ssh
} if %w{centos5 centos6}.include? env_os

run "passwd -uf jenkins" if env_os == 'centos6'

run %Q{
  useradd jenkins
  mkdir -p /home/jenkins
  chown jenkins: -R /home/jenkins
  chsh -s /bin/bash jenkins
  rm -f /bin/sh
  ln -s /bin/bash /bin/sh
} if %w{lucid precise trusty xenial}.include? env_os

puppet_file = env_os =~ /centos/ ? "/etc/sysconfig/puppet" : "/etc/default/puppet"
run %Q{
  touch #{puppet_file}
  mkdir -p /opt /nail /package /etc/puppet /var/lib/puppet /var/cache/omnibus
  chown jenkins: /opt /nail /package /etc/puppet /var/lib/puppet /var/cache/omnibus #{puppet_file}
}

run %Q{
  echo 'gem: --no-document' > /etc/gemrc && \
  echo 'install: --no-ri --no-rdoc' >> /etc/gemrc && \
  echo 'update: --no-ri --no-rdoc' >> /etc/gemrc && \
  cp /etc/gemrc /package/.gemrc && \
  cp /etc/gemrc /home/jenkins/.gemrc
}

# ruby2.1.2
add "ruby-build-20140524.tar.gz /tmp"
add "ruby-2.1.2-patches.tar.gz /tmp"
run %Q{
  mkdir -p /opt/puppet-omnibus/embedded && \
  export MAKE_OPTS="-j3 -s" && \
  export RUBY_CFLAGS=-Os && \
  export RUBY_BUILD_CACHE_PATH=/tmp && \
  export RUBY_CONFIGURE_OPTS="--without-gdbm --without-dbm --disable-install-doc --without-tcl --without-tk" && \
  cat /tmp/ruby-2.1.2-patches/* | /tmp/ruby-build-20140524/bin/ruby-build -p 2.1.2 /opt/puppet-omnibus/embedded && \
  chown -R jenkins: /opt/puppet-omnibus && \
  rm -rf /opt/puppet-omnibus/embedded/share/*
}
